name: CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    #  branches: [ chore/test-github-action ]
    tags:
      - v[0-9]+.[0-9]+.[0-9]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/test-github-action-cd
  VERSION: ${{ github.sha }} # 나중에 테그로 변경
  NAME: github-action-cd

# 빌드 Job
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github actions 작업 브랜치로 checkout
      - uses: actions/checkout@v2
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # Github Container Registry(ghcr)에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
    needs: build # build 후에 실행되도록 정의
    name: Deploy
    # self-hosted: 자체 설치 러너 사용
    # label-go: 실행할 러너 라벨명 => 러너 설치시 지정하는 라벨명이다.
    runs-on: [self-hosted, label-go]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_GITHUB_TOKEN }}
      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 3000:3000 --name github-action-cd --restart always ${{ env.DOCKER_IMAGE }}:latest
